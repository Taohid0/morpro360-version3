{"version":3,"sources":["validation/input.js","views/CustomModals/SuccessModal.js","views/CustomModals/DangerModal.js","ApiCalls/driver.js","views/Forms/Driver/AddDriverForm.js","views/Component/Driver/AddDriver.js"],"names":["validateInput","obj","arr","errorMessages","name","description","phone","firstName","lastName","userName","email","password","distance","pickUpDate","dropOffDate","weight","rate","driverStatus","productDetails","pickUpAddress","pickUpCity","pickUpZipCode","pickUpState","dropOffAddress","dropOffCity","dropOffZipCode","dropOffState","status","offererCompanyId","brokerId","assignedCompanyId","assignerUserId","assignerDriverId","state","city","license","address","companyId","driverId","note","loadId","MC","DOT","errors","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","field","value","push","err","return","length","console","log","Success","_this","this","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","reactstrap__WEBPACK_IMPORTED_MODULE_6__","isOpen","props","isVisible","toggle","toggleSuccess","className","reactstrap__WEBPACK_IMPORTED_MODULE_7__","title","reactstrap__WEBPACK_IMPORTED_MODULE_8__","reactstrap__WEBPACK_IMPORTED_MODULE_9__","reactstrap__WEBPACK_IMPORTED_MODULE_10__","color","onClick","toggleModal","goToDashboard","Component","DangerModal","toggleDanger","createDriver","_x","_createDriver","apply","arguments","_callee","data","userService","user","driverURL","promise","_mnt_01D372CE3128C020_PROGRAM_PART_koa_projects_morpro360_version3_morpro360_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","wrap","_context","prev","UserService","getUser","sent","AppConfig","axios","headers","Authorization","token","method","url","abrupt","stop","getCompanyDrivers","_x2","_getCompanyDrivers","_callee2","id","companyDriversURL","_context2","AddDriverForm","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","repeatPassword","isErrorModalVisible","modalErrorMessage","isSuccessModalVisible","successModalTitle","modalSuccessMessage","companyDropdown","loading","handleChange","bind","assertThisInitialized","handleSubmit","toggleDangerModal","toggleSuccessModal","setState","e","defineProperty","target","preventDefault","stateData","validationErrors","errormessage","join","response","t0","alert","clearData","history","_this2","react_default","LoadingOverlay_default","active","styles","spinner","base","objectSpread","width","background","text","SuccessModal","Card","CardHeader","CardBody","FormGroup","Label","htmlFor","Input","type","placeholder","onChange","Row","Col","md","Button","AddDriver","loadUserOrRedirect","AddDriverForm_AddDriverForm"],"mappings":"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","file":"static/js/63.a6e5a097.chunk.js","sourcesContent":["function validateInput(obj,arr)\n{\n    const errorMessages = {\n        \"name\" : \"Name cannot be blank\",\n        \"description\":\"Description cannot be blank\",\n        \"phone\":\"Phone number cannot be blank\",\n        \"firstName\":\"Fist name cannot be blank\",\n        \"lastName\": \"Last name cannot be blank\",\n        \"userName\":\"Username cannot be blank\",\n        \"email\" :\"Email cannot be blank\",\n        \"password\" : \"Password cannot be blank\",\n        \"distance\":\"Distance  cannot be blank\",\n        \"pickUpDate\":\"Pick Up Date cannot be blank\",\n        \"dropOffDate\":\"Drop Off Date cannot be blank\",\n        \"weight\":\"Weight cannot be blank\",\n        \"rate\":\"Rate cannot be blank\",\n        \"driverStatus\":\"Driver Status cannot be blank\",\n        \"productDetails\":\"Product Details cannot be blank\",\n        \"pickUpAddress\":\"Pick Up Address cannot be blank\",\n        \"pickUpCity\":\"Pick Up City cannot be blank\",\n        \"pickUpZipCode\":\"Pick Up Zip Code cannot be blank\",\n        \"pickUpState\":\"Pick Up State  cannot be blank\",\n        \"dropOffAddress\":\"Drop Off Address cannot be blank\",\n        \"dropOffCity\":\"Drop Off City cannot be blank\",\n        \"dropOffZipCode\":\"Drop Off Zip Code cannot be blank\",\n        \"dropOffState\":\"Drop Off State cannot be blank\",\n        \"status\":\"Status cannot be blank\",\n        \"offererCompanyId\":\"Offerer Company cannot be blank\",\n        \"brokerId\":\"Broker cannot be blank\",\n        \"assignedCompanyId\":\"Assigned Company cannot be blank\",\n        \"assignerUserId\":\"Assigned User cannot be blank\",\n        \"assignerDriverId\":\"Asigned Driver cannot be blank\",\n        \"state\":\"State cannot be blank\",\n        \"city\":\"City cannot be blank\",\n        \"license\":\"License cannot be blank\",\n        \"address\":\"Address cannot be blank\",\n        \"companyId\":\"Company cannnot be blank\",\n        \"driverId\":\"Driver cannot blank\",\n        \"note\":\"Note cannot be blank\",\n        \"loadId\":\"Load cannot be blank\",\n        \"MC\":\"MC cannot be blank\",\n        \"DOT\":\"DOT cannot be blank\",\n        \n\n    }\n    let errors = [];\n    for(let field of arr)\n    {\n        if(!obj[field])\n        {\n            errors.push(errorMessages[field]);\n        }\n    }\n    if (errors.length===0)\n    {\n        return false;\n    }\n    console.log(errors);\n    return errors;\n}\nexport default validateInput;","import React, {Component} from \"react\";\n\nimport {Button,Modal, ModalFooter, ModalHeader,ModalBody} from \"reactstrap\";\n\n\nexport default class Success extends Component{\n    \n    render()\n    {\n        return(\n     <Modal\n                  isOpen={this.props.isVisible}\n                  toggle={this.toggleSuccess}\n                  className={\"modal-success \" + this.props.className}\n                >\n                  <ModalHeader toggle={this.toggleSuccess}>\n                    {this.props.title}\n                  </ModalHeader>\n                  <ModalBody>\n                  <pre>{this.props.errors}</pre>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button color=\"success\" onClick={()=>{this.props.toggleModal();this.props.goToDashboard();}}>\n                      OK\n                    </Button>{\" \"}\n                  </ModalFooter>\n                </Modal>\n        )\n    }\n\n}\n","import React, {Component} from \"react\";\n\nimport {Button,Modal, ModalFooter, ModalHeader,ModalBody} from \"reactstrap\";\n\n\nexport default class DangerModal extends Component{\n    \n    render()\n    {\n        return(\n            <Modal isOpen={this.props.isVisible} toggle={this.toggleDanger}\n            className={'modal-danger ' + this.props.className}>\n       <ModalHeader toggle={this.toggleDanger}>Error</ModalHeader>\n       <ModalBody>\n         <pre>{this.props.errors}</pre>\n       </ModalBody>\n       <ModalFooter>\n         {/* <Button color=\"danger\" onClick={this.toggleDanger}>Do Something</Button>{' '} */}\n         <Button color=\"secondary\" onClick={this.props.toggleModal}>CLOSE</Button>\n       </ModalFooter>\n     </Modal>\n        )\n    }\n\n}","import axios from \"axios\";\nimport AppConfig from \"../config/AppConfig\";\n\nimport UserService from \"../services/User\";\n\nexport async function createDriver(data)\n{\n    const userService= new UserService();\n    const user = await userService.getUser()\n\n    const {driverURL} = AppConfig;\n\n    const promise = await axios({\n        headers:{\n            \"Authorization\":user.token,\n        },\n        method: \"POST\",\n        url:driverURL,\n        data\n    });\n    return promise;\n}\n\nexport async function getCompanyDrivers(id)\n{\n    const userService= new UserService();\n    const user = await userService.getUser()\n\n    let {companyDriversURL} = AppConfig;\n    companyDriversURL +=\"/\"+id;\n    const promise = await axios({\n        headers:{\n            \"Authorization\":user.token,\n        },\n        method: \"GET\",\n        url:companyDriversURL,\n    });\n    return promise;\n}","import React, { Component } from \"react\";\nimport {\n  Badge,\n  Button,\n  ButtonDropdown,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  Col,\n  Collapse,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  Fade,\n  Form,\n  FormGroup,\n  FormText,\n  FormFeedback,\n  Input,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n  Label,\n  Row\n} from \"reactstrap\";\nimport LoadingOverlay from \"react-loading-overlay\";\nimport UserService from \"../../../services/User\";\nimport validateInput from \"../../../validation/input\";\nimport { createDriver } from \"../../../ApiCalls/driver\";\nimport DangerModal from \"../../CustomModals/DangerModal\";\nimport SuccessModal from \"../../CustomModals/SuccessModal\";\n\nexport default class AddDriverForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: \"\",\n      phone: \"\",\n      state: \"\",\n      city: \"\",\n      address: \"\",\n      email: \"\",\n      // \"companyId\":\"\",\n      license: \"\",\n      password: \"\",\n      repeatPassword: \"\",\n      isErrorModalVisible: false,\n      modalErrorMessage: \"\",\n      isSuccessModalVisible: false,\n      successModalTitle: \"Sucessful\",\n      modalSuccessMessage: \"\",\n      companyDropdown: [],\n      loading:false,\n    };\n    this.userService = new UserService();\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.toggleDangerModal = this.toggleDangerModal.bind(this);\n    this.toggleSuccessModal = this.toggleSuccessModal.bind(this);\n  }\n\n  componentWillMount() {\n  }\n\n\n  toggleDangerModal() {\n    this.setState((state, props) => ({\n      isErrorModalVisible: !state.isErrorModalVisible\n    }));\n  }\n  toggleSuccessModal() {\n    this.setState((state, props) => ({\n      isSuccessModalVisible: !state.isSuccessModalVisible\n    }));\n  }\n  handleChange(e) {\n    this.setState({ [e.target.name]: e.target.value });\n  }\n  async handleSubmit(e) {\n    e.preventDefault();\n    console.log(this.state);\n    const {\n      isErrorModalVisible,\n      modalErrorMessage,\n      isSuccessModalVisible,\n      modalSuccessMessage,\n      successModalTitle,\n      companyDropdown,\n      repeatPassword,\n      loading,\n      ...stateData\n    } = this.state;\n    const validationErrors = validateInput(stateData, [\n      \"name\",\n      \"email\",\n      \"phone\",\n      \"state\",\n      \"city\",\n      \"address\",\n      \"license\",\n      \"password\"\n    ]);\n\n    if (validationErrors) {\n      const errormessage = validationErrors.join(\"\\n\");\n      this.setState({ modalErrorMessage: errormessage });\n      this.toggleDangerModal();\n\n      return;\n    }\n    if (this.state.password !== this.state.repeatPassword) {\n      const errormessage = \"Password and reapeated password mismatched\";\n      this.setState({ modalErrorMessage: errormessage });\n      this.toggleDangerModal();\n      return;\n    }\n\n    try {\n      this.setState({loading:true});\n      const response = await createDriver(stateData);\n      const data = response.data;\n      if (data.status) {\n        const modalSuccessMessage = \"Successfully new driver added\";\n        this.setState({ modalSuccessMessage });\n        this.toggleSuccessModal();\n      } else {\n        const errormessage = data.errors.join(\"\\n\");\n        this.setState({ modalErrorMessage: errormessage,password:\"\",repeatPassword:\"\" });\n        this.toggleDangerModal();\n      }\n    } catch (err) {\n      console.log(err);\n      const response = err.response;\n      if (response && response.status === 401) {\n        const errorMessage = \"Session expired, please login to continue\";\n        alert(errorMessage);\n        this.userService.clearData();\n        this.props.history.push(\"/login\");\n      } else {\n        const errormessage = \"Something wrong, please try again later\";\n        this.setState({ modalErrorMessage: errormessage });\n        this.toggleDangerModal();\n      }\n    }\n    this.setState({loading:false});\n  }\n  render() {\n    return (\n      <div>\n        <LoadingOverlay\n          active={this.state.loading}\n          styles={{\n            spinner: base => ({\n              ...base,\n              width: \"250px\",\n              background: \"rgba(0, 0, 0, 0.2)\"\n            })\n          }}\n          spinner\n          text=\"\"\n        />\n        <DangerModal\n          isVisible={this.state.isErrorModalVisible}\n          errors={this.state.modalErrorMessage}\n          toggleModal={this.toggleDangerModal}\n        />\n        <SuccessModal\n          isVisible={this.state.isSuccessModalVisible}\n          errors={this.state.modalSuccessMessage}\n          toggleModal={this.toggleSuccessModal}\n          title={this.state.successModalTitle}\n          goToDashboard={() => this.props.history.push(\"/dashboard\")}\n        />\n        <Card>\n          <CardHeader>\n            <strong>Driver</strong>\n            <small> Form</small>\n          </CardHeader>\n          <CardBody>\n            <FormGroup>\n              <Label htmlFor=\"driver\">Name</Label>\n              <Input\n                type=\"text\"\n                id=\"name\"\n                placeholder=\"Enter driver name\"\n                name=\"name\"\n                value={this.state.name}\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            <Row>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input\n                    type=\"phone\"\n                    id=\"phone\"\n                    placeholder=\"xxxxxxxxx\"\n                    name=\"phone\"\n                    value={this.state.phone}\n                    onChange={this.handleChange}\n                  />\n                </FormGroup>\n              </Col>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    type=\"email\"\n                    id=\"email\"\n                    placeholder=\"myawesomemail@mymail.com\"\n                    name=\"email\"\n                    value={this.state.email}\n                    onChange={this.handleChange}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n\n            <Row>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label htmlFor=\"state\">State</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"state\"\n                    placeholder=\"Enter driver's state\"\n                    name=\"state\"\n                    value={this.state.state}\n                    onChange={this.handleChange}\n                  />\n                </FormGroup>\n              </Col>\n              <Col md=\"6\">\n                <FormGroup>\n                  <Label htmlFor=\"city\">City</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"city\"\n                    placeholder=\"Enter driver's city\"\n                    name=\"city\"\n                    value={this.state.city}\n                    onChange={this.handleChange}\n                  />\n                </FormGroup>\n              </Col>\n            </Row>\n\n            <FormGroup>\n              <Label htmlFor=\"address\">Address</Label>\n              <Input\n                type=\"text\"\n                id=\"address\"\n                placeholder=\"Enter driver's address\"\n                name=\"address\"\n                value={this.state.address}\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"license\">License Number</Label>\n              <Input\n                type=\"text\"\n                id=\"license\"\n                placeholder=\"Enter driver's license\"\n                name=\"license\"\n                value={this.state.license}\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"password\">Driver's Password</Label>\n              <Input\n                type=\"password\"\n                id=\"password\"\n                placeholder=\"This driver will use this password for logging in to his account\"\n                name=\"password\"\n                value={this.state.password}\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Label htmlFor=\"license\">Repeat Password</Label>\n              <Input\n                type=\"password\"\n                id=\"repeatPassword\"\n                placeholder=\"Repeat driver's password\"\n                name=\"repeatPassword\"\n                value={this.state.repeatPassword}\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n\n            {/* <FormGroup>\n                <Label htmlFor=\"companyId\">Select Company</Label>\n                <Input type=\"select\" name=\"companyId\" id=\"companyId\" value={this.state.companyId} onChange={this.handleChange}>\n                   {this.state.companyDropdown}\n                </Input>\n              </FormGroup> */}\n          </CardBody>\n\n          {/* <Row className=\"align-items-right\">\n              <Col  md=\"3\" xs=\"1\" className=\"\">\n                <Button block color=\"success\">Success</Button>\n              </Col>\n            </Row> */}\n\n          <Button\n            onClick={this.handleSubmit}\n            className=\"btn btn-success col-6 align-self-center\"\n          >\n            <i className=\"fa fa-dot-circle-o\" /> Create Driver\n          </Button>\n          <br />\n          <br />\n        </Card>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AddDriverForm from \"../../Forms/Driver/AddDriverForm\";\n\nimport UserService from \"../../../services/User\";\nexport default class AddDriver extends Component {\n  constructor(props) {\n    super(props);\n\n    this.userService = new UserService();\n    this.loadUserOrRedirect = this.loadUserOrRedirect.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadUserOrRedirect();\n  }\n  async loadUserOrRedirect() {\n    const user = await this.userService.getUser();\n\n    if (!user) {\n      this.props.history.push(\"/login\");\n    }\n  }\n\n  render() {\n    return <AddDriverForm history={this.props.history}/>;\n  }\n}\n"],"sourceRoot":""}